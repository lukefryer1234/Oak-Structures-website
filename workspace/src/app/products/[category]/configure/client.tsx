
"use client";

import { useEffect } from 'react';
import { useParams, useRouter, notFound } from 'next/navigation'; // Added notFound
import ConfigureGaragesPage from '@/app/products/garages/configure/page';
import ConfigureGazebosPage from '@/app/products/gazebos/configure/page';
import ConfigurePorchesPage from '@/app/products/porches/configure/page';
import ConfigureOakBeamsPage from '@/app/products/oak-beams/configure/page';
import ConfigureOakFlooringPage from '@/app/products/oak-flooring/configure/page'; // Re-added for oak-flooring

// This component acts as a router to the specific category configuration page
export default function CategoryConfigClient() {
  const params = useParams();
  const router = useRouter(); // useRouter can be kept if needed for other client-side navigation
  const category = params.category as string;

  // List of valid categories
  const validCategories = ['garages', 'gazebos', 'porches', 'oak-beams', 'oak-flooring']; // Re-added oak-flooring

  useEffect(() => {
    if (category && !validCategories.includes(category)) {
      // If the category is not valid, trigger a 404 page
      // This check might be redundant if generateStaticParams is exhaustive and fallback is false,
      // but good for robustness or if fallback: 'blocking' or true is used.
      notFound();
    }
    // validCategories is a constant, so it doesn't need to be in the dependency array
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [category, router]); // router might not be strictly needed if only using notFound

  if (!category || !validCategories.includes(category)) {
    // This will be caught by the useEffect notFound() or by Next.js if the path isn't generated by generateStaticParams
    return null; // Or a loading indicator/error component
  }

  // Render the appropriate configuration component based on the category
  switch (category) {
    case 'garages':
      return <ConfigureGaragesPage />;
    case 'gazebos':
      return <ConfigureGazebosPage />;
    case 'porches':
      return <ConfigurePorchesPage />;
    case 'oak-beams':
      return <ConfigureOakBeamsPage />;
    case 'oak-flooring':
      return <ConfigureOakFlooringPage />;
    default:
      // This case should ideally be handled by the useEffect notFound()
      // or by Next.js static generation if the path is invalid.
      return notFound();
  }
}
